Może uda nam się to lekko przegenerować, napiszę Ci wszystkie klasy, które mam i napiszę w skrócie co robią. Mógłbyś rozwinąć to bardziej i opisać ładnymi słowami? Napiszę Ci w tej wiadomości kilka klas i foldery w których się znajdują.


Folder SDL2_Managers - znajdują się tu klasy zajmujące się głównie obsługą biblioteki SDL2:
FontTextureManager - klasa zajmuje się załadowaniem czcionki, przygotowaniem powierzchni i narysowania tekstu na ekranie gry.
ImageTextureManager - klasa zajmuje się załadowaniem z odpowiedniej ścieżki i następnie narysowaniem obrazu na ekranie gry.
TextObject - klasa reprezentuje obiekt który będzie wypisywany na ekranie, jeśli zajdzie taka potrzeba. Korzysta z klas FontTextureManager i ImageTextureManager.


MapUtils - znajdują się tu klasy zajmujące się budowaniem mapy gry:
_VirtualMap - klasa interfejs dla wszystkich map. Klasy dziedziczące po niej będą znały ścieżki do wszystkich wymaganych grafik potrzebnych do zbudowania mapy, będą także potrafiły zbudować mapę z pliku txt, zapisać mapę gry do pliku txt, albo wygenerować losowo zbudowaną mapę.
BackgroundMap - klasa zajmuje się konkretnym budowaniem poziomu gry, mocno korzysta z klasy interfejsu. Posiada informacje gdzie konkretnie znajduje się środek mapy, bohater gracza, przesunięcie bohatera względem środka, itp.


Folder GameObjects - znajdują się tu obiekty gry, które będą współdziałać z postacią gracza. Posiadamy tu głównie interfejsy które znacznie ułatwią nam pracę nas przy ulepszaniu i rozbudowywaniu gry. Posiadają wiele wartości które są generowane w sposób losowy, co urozmaica każdą rozgrywkę.:
__VirtualObject - klasa interfejs dla wszystkich obiektów gry. Posiada metody i atrybuty potrzebne do komunikacji z ImageTextureManager, co sprawia, że będziemy mogli rysować nasze obiekty w grze. Każdy obiekt gry musi posiadać metodę Update oraz Render.
_EnemyObject - klasa interfejs dla wszystkich przeciwników. Posiada metody i atrybuty odpowiedzialne za poruszanie przeciwników, i może je losować konkretnym obiektom. Dodatkowo posiada atrybuty odpowiedzialne za rozróżnianie siły przeciwników.
_InteractiveObject - klasa interfejs dla wszystkich obiektów interaktywnych. Dodatkowo posiada atrybuty odpowiedzialne za rozróżnianie wyzwania, to znaczy jaka musi być statystyka gracza aby móc skorzystać z tego obiektu.
_ItemObject - klasa interfejs dla wszystkich przedmiotów do automatycznego zbierania. Dodatkowo posiada atrybuty odpowiedzialne za siłę efektów zebranych przedmiotów.
MainHeroObject - klasa reprezentuje głównego gracza i skupia w sobie klasy poboczne z podfolderu HeroUtils.

Podfolder SpecEnemyObjects - znajdują się tu podklasy _EnemyObject, czyli poszczególne typy wrogów:
EnemyMageObject - klasa reprezentująca przeciwnika maga, początkowo ta postać nie będzie atakować bohatera gracza, jednak z każdą zebraną miksturą i otworzoną skrzynią stosunki będą się pogarszać aż w końcu przeciwnicy Ci będą atakować a potem zadawać podwójne obrażenia. Zbieranie jabłek poprawia z nimi relacje. Można ich pokonać posiadając odpowiednio wysoką statystkę Strength.
EnemySentinelObject - klasa reprezentująca przeciwnika strażnika, początkowo ta postać nie będzie atakować bohatera gracza, jednak za każdym razem gdy bohater przejdzie przez teleport stosunki będą się pogarszać aż w końcu przeciwnicy Ci będą atakować a potem zadawać podwójne obrażenia. Zbieranie jabłek poprawia z nimi relacje. Można ich pokonać posiadając odpowiednio wysoką statystkę Strength.

Podfolder SpecInteractiveObjects - znajduję się tu podklasy _InteractiveObject, czyli poszczególne typy obiektów interaktywnych: 
ChestObject - klasa reprezentuje obiekt interaktywny skrzyni, można ją otworzyć używając odpowiedniego przycisku i posiadając odpowiednio wysoką statystykę Agility. Po otworzeniu wzmacnia losową statystykę, pogarsza relacje z przeciwnikiem magiem i daje określoną ilość ScorePoints.
TeleportObject - klasa reprezentuje obiekt interaktywny teleport, można nim podróżować używając odpowiedniego przycisku i posiadając odpowiednio wysoką statystykę Inteligence. Korzystając z niego dostaniemy się do kolejnych poziomów. Korzystanie z niego pogarsza relacje z przeciwnikiem strażnikiem.

Podfolder SpecItemObjects - znajduję się tu podklasy _ItemObject, czyli poszczególne typy przedmiotów do automatycznego zbierania:
AppleItemObject - klasa reprezentuje zbieralny przedmiot jabłko. Zbieranie jabłek może przywrócić zdrowie, bądź zadać obrażenia, jednak co najważniejsze, poprawia relacje z każdym typem przeciwnika.
CoinItemObject - klasa reprezentuje zbieralny przedmiot moneta. Zbieranie monet daje określoną ilość ScorePoints.
PotionItemObject - klasa reprezentuje zbieralny przedmiot mikstura. Zbieranie mikstur zawsze przywraca zdrowie, jednak pogarsza relacje z przeciwnikami magami.

Podfolder HeroUtils - znajdują się tu klasy powiązane z MainHeroObject:
HeroBasicClass - klasa reprezentuje bazowe statystyki bohatera gracza (czyli np. HeroHealthPoints, ScorePoints, Strength, Agility, Intelligence)  i pomaga rozpatrywać kolizje z innymi obiektami.
HeroChoices - klasa reprezentuje wybory i akcje podjęte przez gracza jako maszynę stanów, czyli na przykład relacje z przeciwnikami.
HeroKeyboardHandler - klasa zbiera informacje o nacisniętych przyciskach na klawiaturze i przekazuje to dalej tak aby gra wiedziała co gracz zamierza zrobić ze swoim bohaterem.


Folder LevelUtils - skupiają w sobie inne klasy które już wymieniliśmy, tworzą i zarządzają poziomami gry:
GameLevel - klasa jest reprezentacją konkretnego poziomu gry. Posiada ID oraz wektory wszystkich GameObjects (obiektów gry, czyli np. przeciwników, przedmiotów, obiektów interaktywnych). Obiekty gry generują się w losowej ilości i losowych miejscach, aby gra była bardziej zróżnicowana w każdej rozgrywce.
GameLevelManager - klasa posiada w sobie wektor zbudowany z klasy GameLevel. Klasa ta odpowiada za zderzenia między GameObjects wymienionymi wcześniej, czyli na przykład za walkę z przeciwnikami, zebranie monety, czy przejście przez portal.


Pozostały jeszcze jedna klasa, która nie należy do żadnego folderu.
Game - Jest to główna klasa gry, która dostarcza najważniejszych bibliotek (np. SDL2) wszystkim innym klasom. Współgra z plikiem Main.cpp, razem odpowiadają za działanie gry. Ponadto wywołuje nieskończoną pętlę gry oraz odpala GameLevelManager. Posiada atrybuty odpowiedzialne za wymiary aplikacji i gry. A także, co może nawet ważniejsze posiada obiekty static SDL_Renderer* mainGameRender oraz static SDL_Event mainGameEvent.
